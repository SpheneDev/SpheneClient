name: Release SpheneClient

on:
  workflow_dispatch:
    inputs:
      increment_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      changelog:
        description: 'Changelog text for this release (use \n for line breaks)'
        required: true
        type: string

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Checkout SpheneAPI
      uses: actions/checkout@v4
      with:
        repository: SpheneDev/SpheneAPI  # Replace with actual API repository
        path: ./SpheneAPI
        token: ${{ secrets.GITHUB_TOKEN }}  # Use PAT if private repo: ${{ secrets.API_ACCESS_TOKEN }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Download and install Dalamud
      run: |
        Invoke-WebRequest -Uri "https://goatcorp.github.io/dalamud-distrib/stg/latest.zip" -OutFile latest.zip
        Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"
        
    - name: Get latest version and increment
      id: get_version
      run: |
        # Get latest release version from GitHub API
        $headers = @{
          'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
          'Accept' = 'application/vnd.github.v3+json'
        }
        
        try {
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -Headers $headers
          $latestVersion = $response.tag_name -replace '^v', ''
          Write-Host "Latest version found: $latestVersion"
        } catch {
          Write-Host "No previous releases found, starting with 0.0.0"
          $latestVersion = "0.0.0"
        }
        
        # Parse version components
        $versionParts = $latestVersion.Split('.')
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]
        $patch = [int]$versionParts[2]
        
        # Increment based on input
        switch ("${{ github.event.inputs.increment_type }}") {
          "major" {
            $major++
            $minor = 0
            $patch = 0
          }
          "minor" {
            $minor++
            $patch = 0
          }
          "patch" {
            $patch++
          }
        }
        
        $newVersion = "$major.$minor.$patch"
        $newTag = "v$newVersion"
        
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "tag=$newTag" >> $env:GITHUB_OUTPUT
        echo "New version: $newVersion"
        echo "New tag: $newTag"
      shell: powershell
        
    - name: Update project version
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $csprojPath = "Sphene/Sphene.csproj"
        $content = Get-Content $csprojPath -Raw
        $content = $content -replace '<Version>.*?</Version>', "<Version>$version</Version>"
        $content = $content -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $content = $content -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        Set-Content $csprojPath $content
      shell: powershell
      
    - name: Restore dependencies
      run: dotnet restore Sphene.Actions.sln
      
    - name: Build Release
      run: dotnet build Sphene.Actions.sln --configuration Release --no-restore
      
    - name: Create release package
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $outputDir = "Sphene-v$version"
        New-Item -ItemType Directory -Path $outputDir -Force
        
        # Copy all files from Release directory except Sphene subfolder
        Get-ChildItem "Sphene/bin/x64/Release/" -File | Copy-Item -Destination $outputDir
        
        # Copy all subdirectories except Sphene subfolder
        Get-ChildItem "Sphene/bin/x64/Release/" -Directory | Where-Object {
          $_.Name -ne 'Sphene'
        } | Copy-Item -Destination $outputDir -Recurse
        
        # Create zip file
        $zipName = "latest.zip"
        Compress-Archive -Path "$outputDir/*" -DestinationPath $zipName -Force
        echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
      shell: powershell
      id: package
      
    - name: Update plogonmaster.json in repo
      run: |
        # Checkout the repo repository with personal access token
        git clone "https://${{ secrets.REPO_ACCESS_TOKEN }}@github.com/SpheneDev/repo.git" temp-repo
        cd temp-repo
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Read current plogonmaster.json
        $jsonArray = Get-Content "plogonmaster.json" -Raw | ConvertFrom-Json
        $jsonContent = $jsonArray[0]  # Access first element of the array
        
        # Update version in the JSON
        $version = "${{ steps.get_version.outputs.version }}"
        $jsonContent.AssemblyVersion = $version
        
        # Update download URL with new tag
        $newTag = "${{ steps.get_version.outputs.tag }}"
        $jsonContent.DownloadLinkInstall = "https://github.com/SpheneDev/SpheneClient/releases/download/$newTag/latest.zip"
        $jsonContent.DownloadLinkTesting = "https://github.com/SpheneDev/SpheneClient/releases/download/$newTag/latest.zip"
        $jsonContent.DownloadLinkUpdate = "https://github.com/SpheneDev/SpheneClient/releases/download/$newTag/latest.zip"
        
        # Update changelog with proper line breaks
        $changelogText = "${{ github.event.inputs.changelog }}"
        $changelogText = $changelogText -replace '\\n', "`r`n"
        $jsonContent.Changelog = $changelogText
        
        # Update the array with modified content
        $jsonArray[0] = $jsonContent
        
        # Save updated JSON
        $jsonArray | ConvertTo-Json -Depth 10 | Set-Content "plogonmaster.json" -Encoding UTF8
        
        # Commit and push changes
        git add plogonmaster.json
        git commit -m "Auto-update version to $version"
        git push origin main
        
        cd ..
        Remove-Item -Recurse -Force temp-repo
      shell: powershell
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Sphene Client v${{ steps.get_version.outputs.version }}
        body: |
          ## Sphene Client Release v${{ steps.get_version.outputs.version }}
          
          ### Installation via Dalamud Plugin Repository
          
          **Recommended Method:**
          1. Open Dalamud Settings in-game (`/xlsettings`)
          2. Go to "Experimental" tab
          3. Add this repository URL: `https://raw.githubusercontent.com/SpheneDev/repo/refs/heads/main/plogonmaster.json`
          4. Install "Sphene" from the plugin installer
          
          ### Manual Installation
          1. Download the `latest.zip` file from this release
          2. Extract it to your Dalamud plugins directory
          3. Restart Final Fantasy XIV or reload Dalamud plugins
          
          ### Registration Required
          Before using Sphene, join our [Discord Server](https://discord.gg/GbnwsP2XsF) and register in the `#sphene-registration` channel to get your Secret Key.
          
          ### Changes
          See commit history for detailed changes in this release.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}
        files: |
          ${{ steps.package.outputs.zip_name }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}